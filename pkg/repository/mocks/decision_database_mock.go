package mocks

import (
	context "context"
	"log"

	models "github.com/TudorHulban/echotest/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// DecisionDatabase is an autogenerated mock type for the UserDatabase type
type DecisionDatabase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *DecisionDatabase) Create(_a0 context.Context, _a1 *models.Decision) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Decision) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByName provides a mock function with given fields: _a0, _a1
func (_m *DecisionDatabase) DeleteByName(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *DecisionDatabase) FindOne(_a0 context.Context, _a1 interface{}) (*models.Decision, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Decision
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *models.Decision); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Decision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock
func (_m *DecisionDatabase) FindAll(ctx context.Context) (*[]models.Decision, error) {
	log.Fatal("Not implemented")
	return nil, nil
}
